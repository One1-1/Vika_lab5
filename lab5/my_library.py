def task5_1(s):
    '''
    Дана строка символов. Определить, есть ли в ней буквосочетания «чу» и «щу».
    В случае положительного ответа вывести позиции, на которых они расположены.

    :param s: вводимая строка
    :return: positions_chu, positions_shu - позиции чу или щу
    '''
    #Списки для хранения позиций чу и щу
    positions_chu = []
    positions_shu = []

    # Ищем все вхождения "чу"
    index = s.find("чу")
    while index != -1:
        positions_chu.append(index)
        index = s.find("чу", index + 1)

    # Ищем все вхождения "щу"
    index = s.find("щу")
    while index != -1:
        positions_shu.append(index)
        index = s.find("щу", index + 1)

    return positions_chu, positions_shu



def task5_2(text):
    '''
    Дан текст из слов, разделенных пробелами. Оставить в тексте по одному экземпляру каждого слова.

    :param text: вводимый текст
    :return result: строка без повторения слов
    '''
    result = text.split() # Разделяем слова по пробелам и получаем список
    result = set(result) # делаем множество, чтобы убрать повторения
    return ' '.join(result) # Объединяем в строку


def task5_3(text, symbol, flag):
    '''
    В зависимости от признака (0 или 1) в каждой строке текста удалить
    указанный символ везде, где он встречается, или вставить его после k-гo символа.

    :param text: вводимый текст
    :param symbol: символ для удаления
    :param flag: удалить или вставить
    :return: None
    '''

    if flag == 0:
        # Удаляем указанный символ
        result = text.replace(symbol, "")
        print("Результат:", result)
    elif flag == 1:
        # Вводим индекс для вставки
        k = int(input("Введите индекс для вставки (0 - длина строки): "))
        if k < len(text):
            result = text[:k + 1] + symbol + text[k + 1:]
        else:
            result = text + symbol  # Если k больше длины строки, добавляем в конец
        print("Результат:", result)
    else:
        print("Флаг должен быть 0 или 1")


def task5_4(text):
    '''
    Слова английского текста, начинающиеся с гласных букв, рассортировать в
    алфавитном порядке по первой согласной букве слова.

    :param text: текст для сортировки слов
    :return: None
    '''

    words = text.split() # Разделяем текст на слова

    vowel_words = []  #Создаем список для слов, начинающихся с гласных

    # Перебираем каждое слово в списке
    for word in words:
        if word[0].lower() in 'aeiou': # Проверяем, начинается ли слово с гласной буквы
            vowel_words.append(word)

    # Функция для нахождения первой согласной буквы
    def first_consonant(word):
        for char in word[1:]: #Перебираем каждый символ в слове, начиная со второго(первая гласная)
            if char.isalpha() and char not in 'aeiou': # Проверяем буква или нет и проверяем гласная или нет
                return char
        return ''

    sorted_vowel_words = sorted(vowel_words, key=first_consonant) # Сортируем слова по первой согласной букве

    # Выводим отсортированные слова
    print("Отсортированные слова, начинающиеся с гласных:")
    for word in sorted_vowel_words:
        print(word)


def task5_5(ticket_number):
    '''
    Номер билета: Написать регулярное выражение, определяющее является ли
    данная строка номером билета в формате XXX-XXX-XXX (с возможностью
    использования букв в первом блоке, например, A12-345-678).
    - Правильные примеры: A12-345-678, 123-456-789, ABC-123-456
    - Неправильные примеры: A123456789, 123-456789, 123-456-78

    :param ticket_number:
    :return: None
    '''
    import re

    pattern = r'^[A-Za-z0-9]{3}-[0-9]{3}-[0-9]{3}$' #первая часть говорит, что могут быть только буквы и цифры,
                                                    # а в других только цифры по 3 в каждой части

    if re.match(pattern, ticket_number):
        print("Номер билета правильный.")
    else:
        print("Номер билета неправильный.")


def task5_6(s):
    '''
    Строки (слова), содержащие корректные шестнадцатеричные числа.
    Примеры строк, которые подходят «A09G78», «985», «090А65». Примеры
    строк, которые не подходят: «A39GT9», «34K»

    :param s: Вводимое шестнадцатеричное число
    :return: None
    '''
    import re

    hex_pattern = r'^[0-9A-Ga-g]+$'# Числа от 0 до 9 и буквы от A до G заглавные и маленькие

    if re.match(hex_pattern, s):
        print(s + " - корректное шестнадцатеричное число")
    else:
        print(s + " - некорректное шестнадцатеричное число")


def task5_7(text):
    '''
    Удалить из строки все последовательности пробельных символов, оставив
    только по одному пробелы вместо них.

    :param text: вводимая строка
    :return result: строка с одни пробелом между слов
    '''
    import re

    # Регулярное выражение для замены последовательностей пробелов на один пробел
    result = re.sub(r'\s+', ' ', text) # Один и более пробел заменяем на один пробел

    # Вывод результата
    return result





